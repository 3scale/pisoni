= 3scale API Management System Core Libraries

Core libraries for 3scale systems.

== Install

    $ rvm use ruby-2.1.1

    $ gem build 3scale_core.gemspec

    $ gem install 3scale_core-x.y.z.gem

where x.y.z is the version you aim for

== Development

=== Running tests

You can run both tests & specs using API responses cached with VCR:

    $ bundle exec rake

If you want to generate new ones (or responses changed), you need to have a
working instance of backend server with a freshly cleared database and you can
run it like this:

    $ bundle exec rake ci

Note that this relies on a local backend gem, which may or may not be what you
need for testing. Use the environment variable THREESCALE_CORE_INTERNAL_API to
point the tests to your running backend instance:

    $ THREESCALE_CORE_INTERNAL_API=http://10.0.2.2:8081/internal bundle exec rake ci

=== Setting up the environment for testing

During normal development in both backend and core, you would want to either use
the latest backend as a virtual machine on its own and then pointing the internal
api URL environment variable THREESCALE_CORE_INTERNAL_API to it for testing as
described above, or make sure Core's Gemfile points to whatever version from
backend you want and installing that to the bundler's gem cache, ie. copying it
to <core>/vendor/cache/3scale_backend-2.2.0.gem.

This way you don't need to set environment variables nor launch additional VMs,
but it is more error-prone than just using the facilities in backend to let it
listen for requests on its own VM and using the environment variable here.
